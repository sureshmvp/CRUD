/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE APIS IN PurchaseOrderApiGenerated.js PLEASE EDIT ../PurchaseOrderApi.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 
// Dependencies
import axios from "axios";
import { properties } from "../../config/properties";

class PurchaseOrderApiGenerated {

  static contextUrl = properties.endpoint + "/purchaseorder";

  // CRUD METHODS

  /**
  * PurchaseOrderService.create
  *   @description CRUD ACTION create
  *   @param PurchaseOrder obj Object to insert
  *
  */
  static createPurchaseOrder(purchaseorder) {
    return axios.post(PurchaseOrderApiGenerated.contextUrl, purchaseorder )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.delete
  *   @description CRUD ACTION delete
  *   @param ObjectId id Id PurchaseOrder
  *
  */
  static deletePurchaseOrder(id) {
    return axios.delete(PurchaseOrderApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.findByPoNumber
  *   @description CRUD ACTION findByPoNumber
  *   @param Objectid key Id of the resource PoNumber to search
  *
  */
  static findByPoNumber(id) {
    return axios.get(PurchaseOrderApiGenerated.contextUrl + "/findByPoNumber/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.findBypo_lineDetails
  *   @description CRUD ACTION findBypo_lineDetails
  *   @param Objectid key Id of model to search for
  *
  */
  static findBypo_lineDetails(id) {
    return axios.get(PurchaseOrderApiGenerated.contextUrl + "/findBypo_lineDetails/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.findBypo_webOrderLevel
  *   @description CRUD ACTION findBypo_webOrderLevel
  *   @param Objectid key Id of model to search for
  *
  */
  static findBypo_webOrderLevel(id) {
    return axios.get(PurchaseOrderApiGenerated.contextUrl + "/findBypo_webOrderLevel/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.get
  *   @description CRUD ACTION get
  *   @param ObjectId id Id PurchaseOrder
  *   @returns PurchaseOrder
  *
  */
  static getOnePurchaseOrder(id) {
    return axios.get(PurchaseOrderApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.getpo_lineDetails
  *   @description CRUD ACTION getpo_lineDetails
  *   @param Objectid id ID of PurchaseOrder from po_lineDetails
  *
  */
  static getPo_lineDetails(id) {
    return axios.get(PurchaseOrderApiGenerated.contextUrl + '/' + id + 'getPo_lineDetails' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.getpo_webOrderLevel
  *   @description CRUD ACTION getpo_webOrderLevel
  *   @param Objectid id ID of PurchaseOrder from po_webOrderLevel
  *
  */
  static getPo_webOrderLevel(id) {
    return axios.get(PurchaseOrderApiGenerated.contextUrl + '/' + id + 'getPo_webOrderLevel' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.list
  *   @description CRUD ACTION list
  *   @returns ARRAY OF PurchaseOrder
  *
  */
  static getPurchaseOrderList() {
    return axios.get(PurchaseOrderApiGenerated.contextUrl)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * PurchaseOrderService.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id PurchaseOrder
  *   @returns PurchaseOrder
  *
  */
  static savePurchaseOrder(purchaseorder) {
    return axios.post(PurchaseOrderApiGenerated.contextUrl + "/" + purchaseorder._id, purchaseorder )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }



    // Custom APIs
}

export default PurchaseOrderApiGenerated;
