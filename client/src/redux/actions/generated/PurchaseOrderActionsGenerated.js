/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN PurchaseOrderActionsGenerated.js PLEASE EDIT ../PurchaseOrderActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import PurchaseOrderApi from "../../../api/PurchaseOrderApi";

let actionsFunction = {

  //CRUD METHODS

  // Create purchaseorder
  createPurchaseOrder: function(purchaseorder) {
    return function(dispatch) {
      return PurchaseOrderApi
        .createPurchaseOrder(purchaseorder)
        .then(purchaseorder => {
          dispatch(actionsFunction.createPurchaseOrderSuccess(purchaseorder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createPurchaseOrderSuccess: function(purchaseorder) {
    return { type: types.CREATE_PURCHASEORDER_SUCCESS, payload: purchaseorder };
  },


  // Delete purchaseorder
  deletePurchaseOrder: function(id) {
    return function(dispatch) {
      return PurchaseOrderApi
        .deletePurchaseOrder(id)
        .then(purchaseorder => {
          dispatch(actionsFunction.deletePurchaseOrderSuccess(purchaseorder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deletePurchaseOrderSuccess: function(purchaseorder) {
    return { type: types.DELETE_PURCHASEORDER_SUCCESS, payload: purchaseorder };
  },


  // Find by PoNumber
  findByPoNumber: function(key) {
    return function(dispatch) {
      return PurchaseOrderApi
        .findByPoNumber(key)
        .then(item => {
          dispatch(actionsFunction.findByPoNumberSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByPoNumberSuccess: function(item) {
    return { type: types.FINDBYPONUMBER_PURCHASEORDER_SUCCESS, payload: item };
  },


  // Get purchaseorder
  loadPurchaseOrder: function(id) {
    return function(dispatch) {
      return PurchaseOrderApi
        .getOnePurchaseOrder(id)
        .then(purchaseorder => {
          dispatch(actionsFunction.loadPurchaseOrderSuccess(purchaseorder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadPurchaseOrderSuccess: function(purchaseorder) {
    return { type: types.GET_PURCHASEORDER_SUCCESS, payload: purchaseorder };
  },

	
	// Get relation po_lineDetails
  getpo_lineDetails: function(id) {
    return function(dispatch) {
      return PurchaseOrderApi
        .getpo_lineDetails(id)
        .then(item => {
          dispatch(actionsFunction.getpo_lineDetailsSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  getpo_lineDetailsSuccess: function(item) {
    return { type: types.GETPO_LINEDETAILS_PURCHASEORDER_SUCCESS, payload: item };
  },

	
	// Get relation po_webOrderLevel
  getpo_webOrderLevel: function(id) {
    return function(dispatch) {
      return PurchaseOrderApi
        .getpo_webOrderLevel(id)
        .then(item => {
          dispatch(actionsFunction.getpo_webOrderLevelSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  getpo_webOrderLevelSuccess: function(item) {
    return { type: types.GETPO_WEBORDERLEVEL_PURCHASEORDER_SUCCESS, payload: item };
  },

  // Load  list
  loadPurchaseOrderList: function() {
    return function(dispatch) {
      return PurchaseOrderApi
        .getPurchaseOrderList()
        .then(list => {
          dispatch(actionsFunction.loadPurchaseOrderListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadPurchaseOrderListSuccess: function(list) {
    return { type: types.LIST_PURCHASEORDER_SUCCESS, payload: list };
  },

	
  // Save purchaseorder
  savePurchaseOrder: function(purchaseorder) {
    return function(dispatch) {
      return PurchaseOrderApi
        .savePurchaseOrder(purchaseorder)
        .then(purchaseorder => {
          dispatch(actionsFunction.savePurchaseOrderSuccess(purchaseorder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  savePurchaseOrderSuccess: function(purchaseorder) {
    return { type: types.UPDATE_PURCHASEORDER_SUCCESS, payload: purchaseorder };
  },


};

export default actionsFunction;
